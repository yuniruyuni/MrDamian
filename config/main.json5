{
  pipeline: [
    {
      type: "panel",
      // panelのinitialize action(defaultアクション)は
      // パネルの表示を行う本体を定義する。
      // define actionを行うことでこのpanelに対して任意のpanel groupを差し込むことができる
      // そしてdefine actionはreactiveに定義されている。
    },
    {
      // twitchコンポネント
      type: "twitch",

      // twitchコンポネントの場合
      // actionがないならコンポネントの初期化
      // "init"や""でも初期化。
      // "send"など別の名称ならそのアクションを実行する。
      // こういうふうに共通nameだとインスタンスが共通になるという性質をつかって
      // ログインセッションなどの情報を複数のパイプライン内の処理で使い回すことができる。
      // action: "init",

      // { twitch: { main: (ここ) }} に値がアサインされる。
      // 指定がなかったら { twitch: ここ } にアサインされる。
      name: "main",

      // client_idは組み込みの値があるので省略して構わない。
      // ただユーザがどうしてもMrDamianを自前で作りたい場合のために
      // 組み込んだものとは違うclient_idを指定できるようにするかな要検討。
      // "client_id": "'xxxxxxxxxx'",

      // channelは配信者のチャンネル名。
      channel: "yuniruyuni"
    },
    {
      // youtubeコンポネント
      // 多分twitchと使い心地は同じ感じにできる。
      // APIは https://developers.google.com/youtube/v3/live/docs?hl=ja が使える
      // OAuthのdevice code grant flowも存在する: https://developers.google.com/identity/protocols/oauth2/native-app?hl=ja
      type: "youtube",
      // actionがないならコンポネントの初期化

      // nameでインスタンスをmain二設定
      name: "main",

      // channelは配信者のチャンネル名。
      channel: "yuniruyuni"
    },
    // deeplコンポネント
    {
      type: "deepl",
      // actionがないのでこれもセッション初期化。
      apikey: "DEEPL_API_KEY", // TODO: ここに値を書かせるかどうか...結構悩ましい
    },
    {
      type: "panel",
      // define acitonを実行することでpanelに対して新しいpanel groupを差し込むことができる
      // 実行のたびに内容がこれに従った形にアップデートされるので
      // パネルの内容をリアクティブに変更することができる。
      action: "define",
      group: "shoutout",
      args: {
        forms: [
          {
            // select。この設定値の場合、クリックごとに
            // defsの定義された状態を順番にループして
            // 現在の状態を保持する
            type: "select",
            name: "auto_shoutout",
            alts: [
              {
                text: "auto shoutout on",
                color: "base",
                value: true,
              },
              {
                text: "auto shoutout off",
                color: "dark",
                value: false,
              },
            ],
          },
          {
            // ボタン。この設定値の場合クリックごとに
            // panel.shoutout = true
            // という値を持ったイベントが発火
            type: "button",
            name: "shoutout",
            text: "Send shoutout"
          },
        ],
      },
    },
    {
      when: "twitch.main.message",
      // 実行ごとにカウントアップするだけのコンポネント
      // しかしwhenと組み合わせてメッセージ受信数をカウントするのに使えるという寸法
      type: "count",
      name: "message",
    },
    {
      // メッセージが来るたびに再定義を走らせるのでreactiveにメッセージ表示ができる
      when: "twitch.main.message",
      type: "panel",
      action: "define",
      group: "message",
      args: {
        forms: [
          {
            type: "label",
            name: "latest",
            // このようにjexprの展開した結果でcomponentの値を更新することができる
            text: "$ message.name + ': ' + message.text",
          },
          {
            type: "label",
            name: "count",
            text: "$ format('total: {}', count)",
          },
        ]
      },
    },
    {
      // 定期的にイベントを発行するコンポネント
      // Componentの一般論として(type).(name) に trueが入るのだが
      // この場合はnameを持たないので、単に periodic に true が入る。
      type: "periodic",
      // その実行時間。ミリ秒単位。この場合3分。
      "interval": 180000,
    },
    {
      // 上記のようなperiodicの値が登録されるため
      // periodicイベントを受けて定期的なメッセージを送信するには
      // 単にperiodicと書けばよいことになる
      when: "periodic",
      // TODO: panel.shoutoutとかpanel.auto_shoutoutが実現したら
      //       以下のwhenを有効にしたサンプルに変えたい
      // when: "$ panel.shoutout || (panel.auto_shoutout && periodic)",

      // 同じtwitchコンポネントのmainインスタンスなのだけれど
      type: "twitch",
      name: "main",

      // actionとしてsendを指定すると、
      // 同じインスタンスの接続を使ってメッセージ送信を行える
      action: "send",

      args: {
        // この部分はもちろんargsなのでjexprが使える(今回はただの定数)
        message: "Discordチャンネルもあります！チャンネルポイント交換から！"
      },
    },
    {
      when: "twitch.main.message",
      // Submoduleコンポネントはサブモジュールを呼び出すために使える
      type: "submodule",
      // ターゲットのサブモジュールの入ったjson5名を指定する
      path: "auto_translator.json5",
      // サブモジュールに対して接続するコンポネントインスタンスを指定できる
      // 何も指定していない場合はデフォルトのインスタンスが使われる
      // つまり基本的にmain側ではこれを指定する必要はないという形だけど
      // たまに複数のインスタンスをつかいたかったりmain側で色々とインスタンスを使っている場合は
      // ここの指定が必要になる……という仕組み。
      inherit: {
        "main": "main",
        // ここもjexprを使って外部側で動的に名称が指定されても
        // 式を評価せずにただの文字列としてとりあつかう。
        // つまり以下のような式を使っても評価されない。
        // "main": "$ twitch.main.message.channel",
      },
      // サブモジュール側のparamsで設定されている変数に
      // argsの内容が展開される。
      // paramsにないものは消える。
      args: {
        message: "$ twitch.main.message.message",
      }
    },
    {
      when: "twitch.main.message",
      type: "submodule",
      path: "logger.json5",
      args: {
        dir: "./log/twitch/",
        output: {
          channel: "$ twitch.main.message.channel",
          user: "$ twitch.main.message.user",
          message: "$ twitch.main.message.message",
        },
      },
    },
  ]
}